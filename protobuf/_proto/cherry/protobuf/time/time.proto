syntax = "proto3";
package time;

import "cherry/protobuf/utils/patch/go.proto";
import "cherry/protobuf/time/timestamp/timestamp.proto";

option go_package = "github.com/hopeio/cherry/protobuf/time";
option java_multiple_files = true;

message Time {
    int64 t = 1;
}

message Date {
    int64 t = 1;
}

message ModelTimeStr{
    string createdAt = 1 [(go.field) = {tags:'gorm:"type:timestamptz(6);default:now();index"'}];
    string updateAt = 2 [(go.field) = {tags:'gorm:"type:timestamptz(6);default:now()"'}];
    string deletedAt = 3 [(go.field) = {tags:'gorm:"<-:false;type:timestamptz(6);index"'}];
}

message ModelTimestamp{
    time.Timestamp createdAt = 1 [(go.field) = {tags:'gorm:"type:timestamptz(6);default:now();index"'}];
    time.Timestamp updateAt = 2 [(go.field) = {tags:'gorm:"type:timestamptz(6);default:now()"'}];
    time.Timestamp deletedAt = 3 [(go.field) = {tags:'gorm:"<-:false;type:timestamptz(6);index"'}];
}

message Timestamp {
    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}

message Duration {
    // Signed seconds of the span of time. Must be from -315,576,000,000
    // to +315,576,000,000 inclusive. Note: these bounds are computed from:
    // 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    int64 seconds = 1;

    // Signed fractions of a second at nanosecond resolution of the span
    // of time. Durations less than one second are represented with a 0
    // `seconds` field and a positive or negative `nanos` field. For durations
    // of one second or more, a non-zero value for the `nanos` field must be
    // of the same sign as the `seconds` field. Must be from -999,999,999
    // to +999,999,999 inclusive.
    int32 nanos = 2;
}

